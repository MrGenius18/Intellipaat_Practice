create database db_administrator;
use db_administrator;

create table Fact
(Date date,
ProductId int,
Profit int,
Sales int,
Margin int,
COGS int,
Total_Expenses int,
Marketing int,
Inventory int,
Budget_Profit int,
Budget_COGS int,
Budget_Margin int,
Budget_Sales int,
Area_Code int);

Bulk insert Fact
from 'F:\Intellipaat\102_SQL\04_Case-study\fact.csv'
with (
	firstrow = 2,
	fieldterminator = ',',
	rowterminator = '\n');

select * from Fact;

create table Product (
ProductId int,
Product_Type varchar(255),
Product varchar(255),
Type varchar(255));

bulk insert Product
from 'F:\Intellipaat\102_SQL\04_Case-study\Product.csv'
with (
	firstrow = 2,
	fieldterminator = ',',
	rowterminator = '\n');

select * from Product;

create table Location (
Area_Code int,
State varchar(20),
Market varchar(20),
Market_Size varchar(20));

bulk insert Location
from 'F:\Intellipaat\102_SQL\04_Case-study\Location.csv'
with (
	firstrow = 2,
	fieldterminator = ',',
	rowterminator = '\n');

select * from Location;

--1. Display the number of states present in the Location Table.
select count(distinct State) as no_of_state 
from Location;
-- =====================================================

--2. How many products are of regular type?
select count(Type) as no_of_regular_product 
from Product
where Type = 'Regular';
-- =====================================================

--3. How much spending has been done on marketing of product ID1?
select sum(Marketing) as total_spend_on_Marketing 
from Fact
where ProductId = 1;
-- =====================================================

--4. What is the minimum sales of a product?
select min(Sales) as min_sales
from Fact;
-- =====================================================

--5. Display the max Cost of Good Sold (COGS).
select max(Cogs) as max_COGS
from Fact;
-- =====================================================

--6. Display the details of the product where product type is coffee.
select * from Product
where Product_Type = 'Coffee';
-- =====================================================

--7. Display the details where total expenses are greater than 40.
select * from Fact
where Total_Expenses > 40;
-- =====================================================

--8. What is the average sales in area code 719?
select avg(Sales) as avg_sales
from Fact
where Area_Code = 719;
-- =====================================================

--9. Find out the total profit generated by Colorado state.
select sum(Profit) as total_profit_in_Colorado
from Fact
join Location on Fact.Area_Code = Location.Area_Code
where Location.State = 'Colorado';
-- =====================================================

--10. Display the average inventory for each product ID.
select ProductId, avg(Inventory) as avg_Inventory
from Fact
group by ProductId
order by ProductId;
-- =====================================================

--11. Display state in a sequential order in a Location Table.
select distinct State 
from Location
order by State;
-- =====================================================

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
select ProductId, avg(Budget_Profit) as avg_budget
from Fact
group by ProductId
having avg(Budget_Margin) > 100;
-- =====================================================

--13. What is the total sales done on date 2010-01-01?
select sum(Sales) as total_Sales
from Fact
where Date = '2010-01-01';
-- =====================================================

--14. Display the average total expense of each product ID on an individual date.
select ProductId, Date, avg(Total_Expenses) as avg_total_expense
from Fact
group by ProductId, Date
order by ProductId;
-- =====================================================

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
select 
	F.date, 
	F.productID, 
	P.product_type, 
	P.product, 
	F.sales, 
	F.profit, 
	L.state, 
	F.area_code
from Fact as F
Join Product as P on F.ProductId = P.ProductId
Join Location as L on F.Area_Code = L.Area_Code;
-- =====================================================

--16. Display the rank without any gap to show the sales wise rank.
select 
    ProductId,
    Sales,
    dense_rank() over (order by Sales desc) as SalesRank
from Fact;
-- =====================================================

--17. Find the state wise profit and sales.
select 
	L.State, 
	sum(F.Profit) as TotalProfit, 
    sum(F.Sales) as TotalSales
from Fact as F
join Location as L on L.Area_Code = F.Area_Code
group by L.State;
-- =====================================================

--18. Find the state wise profit and sales along with the product name.
select 
	L.State, 
	P.Product,
	sum(F.Profit) as TotalProfit, 
    sum(F.Sales) as TotalSales
from Fact as F
join Location as L on L.Area_Code = F.Area_Code
join Product as P on P.ProductId = F.ProductId
group by L.State, P.Product;
-- =====================================================

--19. If there is an increase in sales of 5%, calculate the increased sales.
select ProductId,
	   Sales,
	   Sales * 1.05 as increased_Sales
from Fact;
-- =====================================================

--20. Find the maximum profit along with the product ID and product type.
select P.ProductId,
	   P.Product_Type,
	   F.Profit as Max_profit
from Fact as F
join Product as P on P.ProductId = F.ProductId
where F.Profit = (select max(Profit) from Fact);
-- =====================================================

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure GetProductsByType
@Product_Type varchar(255)
as
	Select * from Product
	where Product_Type = @Product_Type
go

exec GetProductsByType 'Coffee';
-- =====================================================

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select ProductId,
	   Total_Expenses,
	   Result = IIF(Total_Expenses < 60, 'Profit', 'Loss')
from Fact;
-- =====================================================

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select
	DATEPART(week, Date) as Week_Number,
	ProductId,
	Date,
	sum(Sales) as Weekly_Sales
from Fact
group by rollup (DATEPART(week, Date), ProductId, Date);
-- =====================================================

--24. Apply union and intersection operator on the tables which consist of attribute area code.
select Area_Code from Fact
Union
select Area_Code from Location;

select Area_Code from Fact
Intersect
select Area_Code from Location;
-- =====================================================

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create function GetProductByType (@Product_Type varchar(255))
returns table
as 
return
	( select * from Product
	  where Product_Type = @Product_Type);

select * from GetProductByType('Coffee');
-- =====================================================

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
begin try
	begin transaction
		update Product 
		set Product_Type = 'Tea' 
		where Product_Type = 'Coffee' and ProductId = 1
end try
begin catch
	rollback transaction
end catch

select * from Product where ProductId = 1;
rollback transaction;  -- undo this transaction
-- =====================================================

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date, ProductId, Sales
from Fact
where Total_Expenses between 100 and 200;
-- =====================================================

--28. Delete the records in the Product Table for regular type.
delete from Product
where Type = 'Regular';

select * from Product;
-- =====================================================

--29. Display the ASCII value of the fifth character from the column Product.
select *, ASCII(SUBSTRING(Product, 5, 1)) as FifthCharASCII 
from Product;
-- =====================================================